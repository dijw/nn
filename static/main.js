const addObject=(container,modelpath)=>{const scene=new THREE.Scene();const camera=new THREE.PerspectiveCamera(35,container.offsetWidth/container.offsetHeight,1,1000);const renderer=new THREE.WebGLRenderer({antialias:true,alpha:true});var clock=new THREE.Clock();renderer.setPixelRatio(container.devicePixelRatio);renderer.setSize(container.offsetWidth,container.offsetHeight);container.appendChild(renderer.domElement);const loader=new GLTFLoader();const ambient=new THREE.AmbientLight(COLOR,1.55);const directionalLight=new THREE.DirectionalLight(COLOR,0.25);scene.add(directionalLight);scene.add(ambient);var rgblooder=new RGBELoader();rgblooder.load('/static/3d/file.hdr',function(texture){texture.mapping=THREE.EquirectangularReflectionMapping;scene.environment=texture;})
renderer.render(scene,camera);renderer.toneMapping=THREE.ACESFilmicToneMapping;renderer.toneMappingExposure=1.5;renderer.outputEncoding=THREE.sRGBEncoding;loader.load(modelpath,function(gltf){const model=gltf.scene;model.frustumCulled=false;directionalLight.target=model;var mixer=new THREE.AnimationMixer(model);var action=mixer.clipAction(gltf.animations[0]);action.play();scene.add(model);var i=0;var b=0;camera.frustumCulled=false;renderer.frustumCulled=false;camera.position.set(-30,88,69)
camera.rotation.set(-0.48,-0.38,-0.19)
function onWindowResize(){camera.aspect=container.offsetWidth/container.offsetHeight;camera.updateProjectionMatrix();renderer.setPixelRatio(container.devicePixelRatio);renderer.setSize(container.offsetWidth,container.offsetHeight);}
window.addEventListener('resize',onWindowResize);function animate(){requestAnimationFrame(animate);var delta=clock.getDelta();if(mixer)mixer.update(delta);renderer.render(scene,camera);}
animate()});}